set relativenumber	       " Use Relative Numbering
set nu			           " Use Simple Numbering
set nowrap                 " disable wrap for long lines
set mouse=a                " Scroll with Mouse pad

set expandtab              " replace <Tab with spaces
set tabstop=2              " number of spaces that a <Tab> in the file counts for
set softtabstop=2          " remove <Tab> symbols as it was spaces
set shiftwidth=2           " indent size for << and >>
set shiftround             " round indent to multiple of 'shiftwidth' (for << and >>)
set smartindent            " Smart indent

set scrolloff=999          " always keep cursor at the middle of screen
set noswapfile             " disable creating of *.swp files
set hidden                 " hide buffers instead of closing
set ignorecase             " Use case insensitive search, except when using capital letters
set smartcase              " Must be used with ignorecase inoreder to work
set inccommand=nosplit     " Live feedback for s/pat/replace(Only for Neovim)
set path+=~/.config/nvim/init.vim
set path+=**               " Search all the subdirectories recursively

set dictionary+=/usr/share/dict/words  " dictionary completion
" Correct typos
aug FixTypos
    :command! WQ wq
    :command! Wq wq
    :command! QA qa
    :command! Qa qa
    :command! W w
    :command! Q q
aug end

"This unsets the "last search pattern" register by hitting return
nnoremap <silent> <CR> :noh<CR><CR>
" Disable search highlighting
nnoremap <silent> <Esc><Esc> :nohlsearch<CR><Esc>

call plug#begin('~/.vim/plugged')
" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-sensible' 
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired' 
Plug 'jiangmiao/auto-pairs'
Plug 'michaeljsmith/vim-indent-object'
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-vinegar'


" fuzzy search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Status line
Plug 'itchyny/lightline.vim'

" Monokai
" Plug 'reewr/vim-monokai-phoenix'
" Plug 'ayu-theme/ayu-vim'
Plug 'lifepillar/vim-gruvbox8'

" Comment Plugin
Plug 'tpope/vim-commentary'

" neovim lsp
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/completion-nvim'
Plug 'hrsh7th/nvim-compe'
Plug 'glepnir/lspsaga.nvim'

" Initialize plugin system
call plug#end()

" ColorScheme
set termguicolors     " enable true colors support
set background=dark
colorscheme gruvbox8_hard

" map leader key
let mapleader = ' '


" Zoom a split window in a tab/ close it
nnoremap <leader>,zo :tabnew %<cr>
nnoremap <leader>,zc :tabclose<cr>

" Switch Windows with leader+ hjkl
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>u :UndotreeShow<CR>
nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>
nnoremap <Leader>+ :vertical resize +5<CR>
nnoremap <Leader>- :vertical resize -5<CR>


" Switch between tabs 
nmap <leader>1 1gt
nmap <leader>2 2gt
nmap <leader>3 3gt
nmap <leader>4 4gt
nmap <leader>5 5gt
nmap <leader>6 6gt
nmap <leader>7 7gt
nmap <leader>8 8gt
nmap <leader>9 9gt


" Select pasted last pasted similar to gv
nnoremap gp `[v`]

" Vscode like move lines
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv


" Vim commentry leader+ /
vmap <leader>/ gc
nmap <leader>/ gcc
vmap   //      gc


" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" Fzf
nnoremap <leader>p        :GFiles<CR>
nnoremap <leader>fi       :Files<CR>
nnoremap <leader>fl       :Lines<CR>
nnoremap <leader>rg       :Rg! <C-R><C-W><CR>
nnoremap <leader>ag       :Ag! <C-R><C-W><CR>
nnoremap <leader>C        :Colors<CR>
nnoremap <leader>B        :Buffers<CR>
nnoremap <leader>W        :Windows<CR>
nnoremap <leader>m        :History<CR>

let g:compe = {}
set completeopt=menuone,noselect
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
let g:compe.preselect = 'enable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:true
let g:compe.source.ultisnips = v:true
" -------------------- LSP ---------------------------------


:lua << EOF
local nvim_lsp = require('lspconfig')
local servers = { "pyright", "clangd", "tsserver" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup{ on_attach = on_attach }
end

local saga = require('lspsaga')
saga.init_lsp_saga()
require'lsp_signature'.on_attach()
EOF

" vim-compe 
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm('<CR>')
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
