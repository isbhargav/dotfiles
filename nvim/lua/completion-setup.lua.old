-- ref: https://github.com/nicknisi/dotfiles/blob/main/config/nvim/lua/plugins/lspconfig.lua
-- ref: https://github.com/nicknisi/dotfiles/blob/main/config/nvim/lua/plugins/completion.lua

-- Setup nvim-cmp.
local cmp = require'cmp'
local lspkind = require("lspkind")
local luasnip = require('luasnip')

vim.o.completeopt = "menu,menuone,noselect"

cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      luasnip.lsp_expand(args.body) -- For `luasnip` users.
    end,
  },
  mapping = {
    -- ["<Tab>"] = cmp.mapping(cmp.mapping.select_next_item(), { "i", "s" }),
    -- ["<S-Tab>"] = cmp.mapping(cmp.mapping.select_prev_item(), { "i", "s" }),
    ["<C-j>"] = cmp.mapping.select_next_item({behavior = cmp.SelectBehavior.Insert}),
    ["<C-k>"] = cmp.mapping.select_prev_item({behavior = cmp.SelectBehavior.Insert}),
    ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
    ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
    ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
    ['<C-y>'] = cmp.config.enable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
    ['<C-e>'] = cmp.mapping({
      i = cmp.mapping.abort(),
      c = cmp.mapping.close(),
    }),
    ['<C-n>'] = function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      else
        fallback()
      end
    end,
    ['<C-p>'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      else
        fallback()
      end
    end,
    ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    -- ["<Tab>"] = cmp.mapping(function(fallback)
    --   if require('luasnip').expand_or_jumpable() then
    --     require('luasnip').expand_or_jump()
    --     -- elseif has_words_before() then
    --     --   cmp.complete()
    --   else
    --     fallback()
    --   end
    -- end, { "i", "s" }),
    --
    -- ["<S-Tab>"] = cmp.mapping(function(fallback)
    --   if require('luasnip').jumpable(-1) then
    --     require('luasnip').jump(-1)
    --   else
    --     fallback()
    --   end
    -- end, { "i", "s" }),
  },
  formatting = {
    format = require('lspkind').cmp_format(), -- LSPKIND
  },
  experimental = {
      native_menu = false,
      ghost_text = true
    },
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },  -- vim-lsp
    { name = 'nvim_lua' }, -- nvim lua
    { name = 'luasnip' }, -- For luasnip users.
  }, {
    { name = 'buffer' },
  })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

--  function to be called when lsp attches to buffer 
-- function on_attach(client, bufnr)
  -- do on attach here
-- end

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
-- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
-- Setup lspconfig.
local nvim_lsp = require('lspconfig')
local servers = { "pyright", "clangd", "tsserver"} --, "sumneko_lua"}
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup{
    capabilities = capabilities,
    -- on_attach = on_attach
  }
end


-- +---------------------------------------------------------------+
-- |   _                 _                   _                     |
-- |  | |___ _ __    ___(_) __ _ _ __   __ _| |_ _   _ _ __ ___    |
-- |  | / __| '_ \  / __| |/ _` | '_ \ / _` | __| | | | '__/ _ \   |
-- |  | \__ \ |_) | \__ \ | (_| | | | | (_| | |_| |_| | | |  __/   |
-- |  |_|___/ .__/  |___/_|\__, |_| |_|\__,_|\__|\__,_|_|  \___|   |
-- |        |_|            |___/                                   |
-- +---------------------------------------------------------------+


require('lsp_signature').setup({
  bind = true, -- This is mandatory, otherwise border config won't get registered.
  handler_opts = {
    border = "rounded"
  }
})

